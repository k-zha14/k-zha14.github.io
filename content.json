{"pages":[],"posts":[{"title":"Games101: Computer Graphics Summary","text":"课程主要资料 课程录播-Video Lecture 课件-PowerPoints 课程笔记-Lecture Notes 课后作业-Homework 推荐教材及读物 (Tiger book) Lecture Notes Lec 01 - Overview 计算机图形学概述+专业名词解释 Lec 02 - Linear Algebra 必备的向量和线性代数知识 专业名词Projection-投影； Scale-缩放；Homogenous Coordinates-齐次坐标； Homework Hw0 - 配置环境 HW1 - 旋转、透视投影矩阵 Hw2 - Rasterization(光栅化)","link":"/2020/12/02/Games101-Computer-Graphics-Summary/"},{"title":"Games101: Computer Graphics-Week 1","text":"","link":"/2020/12/02/Games101-Computer-Graphics-Week-1/"},{"title":"Games101: Computer Graphics-Week 2","text":"1. Vector-向量课程中所有的向量默认是列向量形式，转置后为行向量； 1.1 Dot Production在图形学中，核心的作用有三个： 1）求出两个向量的夹角，余弦值； 2）求出向量a在向量b上的投影，以及获得副产物法向量： 3）判断不同向量的前后关系（余弦相似度）： 这里的前后关系可以理解为同向与反向，而且这种关系应用于渲染的光线的金属高光反射参数。 1.2 Cross Production in Graphics 默认使用右手螺旋定则，与OPENGL一致，坐标系为右手系； DirectX默认为左手系，即满足：$$\\vec x \\times \\vec y = -\\vec z$$ 在图形学中，叉乘主要有两个用处： 1）判断向量的左右 从右下角的示例可以看出，这是一个标准的右手系，有：$$\\vec b \\times \\vec a &lt;0, \\vec a \\times \\vec b &gt;0$$这时，对应关系为b在a的左侧，a在b的右侧。 2）判断点是否在图形内部 如何判断P在ABC的内部？ 利用起那一步的左右性进行判断，以A-&gt;B-&gt;C顺序：$$\\vec {AB} \\times \\vec {AP} &gt;0, \\vec {BC} \\times \\vec {BP}&gt;0, \\vec {CA} \\times \\vec {CP} &gt;0$$可以看到，无论对于哪条边，点P始终在该边的左侧，因此P点在ABC中； 进一步，通用的结论是，无论ABC是顺时针，还是逆时针，若P点在图形内，则必然各边叉乘结果同号；反正，至少有一条边结果不同号则在外。 在边上的点，叉乘为0，corner case，是否包含该点由自己定义。 2. Matrix-矩阵基础知识，矩阵的乘法解释挺有意思，贴在下面： 以及如何将向量的点乘和叉乘写成矩阵形式：","link":"/2020/12/02/Games101-Computer-Graphics-Week-2/"},{"title":"Games101: Computer Graphics-Week 3","text":"1. Transformation-变换 Modelling-模型变换 游戏中场景的变化； 机器人跳舞（姿态变化）； 物体相互作用发生形变和缩放； 光栅化成像，从3D到2D的projection（投影） Viewing-视角变换 同一个对象，主摄影视角进行变换产生不同的光栅化视角； 2. 2D Transformation作为3维变换的基础，从2D变换讲起，核心是：将变换操作与矩阵操作联系起来！ Attention: 这些变换均可以由一个变换矩阵表征，所以统称为线性变换（Linear Transforms）； 下面的x, y为图上任意一点的坐标； 下面的变换默认是对基向量（单位长度）进行变换的； 2.1 Scale 等比缩放 非等比缩放 2.2 Reflection-翻转以相对y轴进行镜像翻转为例，给出Reflection Matrix 2.3 Shear-切变 物体具有一定的弹性，可以沿某个方向发生一定的形变。 2.4 Rotate-旋转 2D 旋转，默认逆时针以原点作为中心进行旋转 旋转矩阵的推导和证明： 法1：可以在旋转坐标系中，任选两个点求解映射变换表达式； 法2： 可以取两个特殊点(1,0)和(0,1)以逆时针旋转θ角度，根据旋转前后的坐标，列出4个方程，求解旋转矩阵的未知数； 2.5 Inverse Transform逆变换矩阵就是原变换矩阵的逆矩阵。 Homogeneous Coordinates(齐次坐标) 上述的都是线性变换，可以表示为变换矩阵相乘的形式； Why引入齐次坐标？ 当发生平移变换(Translation，就是翻译这个单词)时，无法再使用上面的变换矩阵相乘的形式进行表征，只能写作**仿射映射(Affline Map)**形式： 仿射变换 = 线性变换 + 平移（即便在齐次坐标中也是如此，先线性再平移） 由于这种形式不满足上面的方程形式，所不是线性变换。 为了能用上面的矩阵乘法形式统一表征变换操作，引入齐次坐标系的概念。 齐次坐标的定义 点和向量的表示 2D Point: $(x, y, 1)^T$ 2D Vector: $ (x, y, 0)^T$ 平移变换表示 为什么点的增加列为1，而向量的增加列为0？ 首先，向量具有平移不变性，也就是说平移操作不应该影响向量； 其次，更深层次，这个符合物理定义： 在扩充定义的补充下，对于$ w \\neq 1$的点，都进行归一化操作，此时point+point实际结果就是中点。 综上，可以用齐次坐标下的线性变换形式表示二维情况下的仿射变换时，齐次坐标的最后一行一定为$ (0, 0, 1) $。（注意限定条件，其他情况下，最后一行有意义）","link":"/2020/12/09/Games101-Computer-Graphics-Week-3/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2020/12/02/hello-world/"}],"tags":[{"name":"Computer Graphics","slug":"Computer-Graphics","link":"/tags/Computer-Graphics/"},{"name":"Summary","slug":"Summary","link":"/tags/Summary/"},{"name":"Linear algebra","slug":"Linear-algebra","link":"/tags/Linear-algebra/"}],"categories":[{"name":"Computer Graphics","slug":"Computer-Graphics","link":"/categories/Computer-Graphics/"},{"name":"Hexo","slug":"Hexo","link":"/categories/Hexo/"}]}